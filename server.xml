<?xml version="1.0" encoding="UTF-8"?>

     <!-- 指定一个端口,这个端口负责监听关闭TomCat的请求,指定向端口发送的命令字符串 -->
    <Server port="8005" shutdown="SHUTDOWN">

	<Listener SSLEngine="on"  className="org.apache.catalina.core.AprLifecycleListener" />
	<Listener className="org.apache.catalina.core.JasperListener" />
	<Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
	<Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
	<Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

	<GlobalNamingResources>

	<Resource auth="Container" 
		    description="User database that can be updated and saved"
			factory="org.apache.catalina.users.MemoryUserDatabaseFactory" 
			name="UserDatabase"
			pathname="conf/tomcat-users.xml"
		    type="org.apache.catalina.UserDatabase" />
	</GlobalNamingResources>

    <!-- 指定service的名字 -->
	<Service name="Catalina">

	        <!-- 指定服务器端要创建的端口号,并在这个断口监听来自客户端的请求 ,
	        	minProcessors:  服务器启动时创建的处理请求的线程数,
	        	maxProcessors: 最大可以创建的处理请求的线程数
	            enableLookups  如果为true，则可以通过调用request.getRemoteHost()进行DNS查询来得到远程客户端的实际主机名，若为false则不进行DNS查询，而是返回其ip地址
	            redirectPort:  指定服务器正在处理HTTP请求时收到了一个SSL传输请求后重定向的端口号
	            acceptCount: 指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理
	            connectionTimeout:	 指定超时的时间数(以毫秒为单位
	         -->
				<Connector port="8080" connectionTimeout="20000" maxPostSize="0"  protocol="HTTP/1.1" redirectPort="8443" />

				<Connector URIEncoding="UTF-8" port="8009" protocol="AJP/1.3" redirectPort="8443" />

		        <!-- 表示指定service中的请求处理机，接收和处理来自Connector的请求) -->
		        <!-- 	指定缺省的处理请求的主机名，它至少与其中的一个host元素的name属性值是一样的 -->
				<Engine defaultHost="localhost" name="Catalina">

                <!-- (表示存放用户名，密码及role的数据库) 
                        className:指定Realm使用的类名，此类必须实现org.apache.catalina.Realm接口
                -->
                
				<Realm className="org.apache.catalina.realm.LockOutRealm">
						<Realm className="org.apache.catalina.realm.UserDatabaseRealm" resourceName="UserDatabase" />
				</Realm>

				<!-- (表示一个虚拟主机) 
						name:指定主机名
						appBase:应用程序基本目录，即存放应用程序的目录
						unPackWars:如果为true，则tomcat会自动将WAR文件解压，否则不解压，直接从WAR文件中运行应用程序
				-->
				<Host appBase="webapps" autoDeploy="true" name="localhost" unpackWARs="true">
		
		        <!-- (功能与Logger差不多，其prefix和suffix属性解释和Logger 中的一样)
						className:指定Valve使用的类名，如用org.apache.catalina.valves.AccessLogValve类可以记录应用程序的访问信息
						directory:指定log文件存放的位置
						pattern:有两个值，common方式记录远程主机名或ip地址，用户名，日期，第一行请求的字符串，HTTP响应代码，发送的字节数。combined方式比common方式记录的值更多
				-->
				<Valve className="org.apache.catalina.valves.AccessLogValve" 	directory="logs" pattern="%h %l %u %t &quot;%r&quot; %s %b" prefix="localhost_access_log."  suffix=".txt" />
		
		        <!-- 表示一个web应用程序，通常为WAR文件，关于WAR的具体信息见SerVlet规范 
				        docBase: 应用程序的路径或者是WAR文件存放的路径
				        path:表示此web应用程序的URL的前缀，这样请求的URL为http://localhost:8080/path/****
				        reloadable:这个属性非常重要，如果为true，则TomCat会自动检测应用程序的/WEB-INF/lib 和/WEB-INF/classes目录的变化，自动装载新的应用程序，我们可以在不重起tomcat的情况下改变应用程序
		         -->
				<Context docBase="lopscoop-manager-web" path="/lopscoop-manager-web" reloadable="true" source="org.eclipse.jst.jee.server:lopscoop-manager-web" />
				</Host>
		</Engine>
		
	</Service>
	
</Server>